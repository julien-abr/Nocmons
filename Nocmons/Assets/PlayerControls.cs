//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""c3919879-24a2-434b-83ac-9babfecbdc26"",
            ""actions"": [
                {
                    ""name"": ""headButton"",
                    ""type"": ""Button"",
                    ""id"": ""3f365351-169a-45a4-af92-566e2ccf7403"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""chestButton"",
                    ""type"": ""Button"",
                    ""id"": ""56862b55-e450-4529-b055-92a0b6dd60f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""handButton"",
                    ""type"": ""Button"",
                    ""id"": ""d5a3b93a-63e3-4eff-a060-d77226209898"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""eyesButton"",
                    ""type"": ""Button"",
                    ""id"": ""a828ba84-af21-4748-b1bd-d6bca5e2fc71"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cbf0a6be-d52b-4fe9-b7e9-446d9a86474c"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""headButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38ed260c-9d3d-4558-9bcf-a51ed64e79e1"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""chestButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d456fa21-06a8-4064-9599-834235cc429e"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""handButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ebdef8e-4cbc-4f0b-9fb1-b33a2ddb658e"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""eyesButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_headButton = m_Gameplay.FindAction("headButton", throwIfNotFound: true);
        m_Gameplay_chestButton = m_Gameplay.FindAction("chestButton", throwIfNotFound: true);
        m_Gameplay_handButton = m_Gameplay.FindAction("handButton", throwIfNotFound: true);
        m_Gameplay_eyesButton = m_Gameplay.FindAction("eyesButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_headButton;
    private readonly InputAction m_Gameplay_chestButton;
    private readonly InputAction m_Gameplay_handButton;
    private readonly InputAction m_Gameplay_eyesButton;
    public struct GameplayActions
    {
        private @PlayerControls m_Wrapper;
        public GameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @headButton => m_Wrapper.m_Gameplay_headButton;
        public InputAction @chestButton => m_Wrapper.m_Gameplay_chestButton;
        public InputAction @handButton => m_Wrapper.m_Gameplay_handButton;
        public InputAction @eyesButton => m_Wrapper.m_Gameplay_eyesButton;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @headButton.started += instance.OnHeadButton;
            @headButton.performed += instance.OnHeadButton;
            @headButton.canceled += instance.OnHeadButton;
            @chestButton.started += instance.OnChestButton;
            @chestButton.performed += instance.OnChestButton;
            @chestButton.canceled += instance.OnChestButton;
            @handButton.started += instance.OnHandButton;
            @handButton.performed += instance.OnHandButton;
            @handButton.canceled += instance.OnHandButton;
            @eyesButton.started += instance.OnEyesButton;
            @eyesButton.performed += instance.OnEyesButton;
            @eyesButton.canceled += instance.OnEyesButton;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @headButton.started -= instance.OnHeadButton;
            @headButton.performed -= instance.OnHeadButton;
            @headButton.canceled -= instance.OnHeadButton;
            @chestButton.started -= instance.OnChestButton;
            @chestButton.performed -= instance.OnChestButton;
            @chestButton.canceled -= instance.OnChestButton;
            @handButton.started -= instance.OnHandButton;
            @handButton.performed -= instance.OnHandButton;
            @handButton.canceled -= instance.OnHandButton;
            @eyesButton.started -= instance.OnEyesButton;
            @eyesButton.performed -= instance.OnEyesButton;
            @eyesButton.canceled -= instance.OnEyesButton;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnHeadButton(InputAction.CallbackContext context);
        void OnChestButton(InputAction.CallbackContext context);
        void OnHandButton(InputAction.CallbackContext context);
        void OnEyesButton(InputAction.CallbackContext context);
    }
}
